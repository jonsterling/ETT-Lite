ett-lite
=========

A fork of Stephanie Weirich's [pi-forall](https://github.com/sweirich/pi-forall).
I just used it because it had a very accessible code-base; I've removed the parametric
quantifier, since that is not the thing I am interested in researching. I've added
equality reflection to see what happens when I do that.

Features
--------
  - PTS representation (uniform syntax for all levels)
  - bidirectional type checking
  - propositional equality
  - inductive & indexed datatypes
  - equality reflection

Not covered (Future work!)
--------------------------
  - nontermination
  - effects
  - co-induction
  - type inference & unification
  - general constraint solving

Caveat
------
There will be bugs. There will be *design* bugs. The language is probably not
sound. Or may not be so in the presence of 'innocent' axioms like classical
logic. Even in this little language there are many semantic pitfalls. C'est la
vie.

Installation
----------
  ett-lite requires GHC and cabal, most easily available from
  the Haskell Platform (http://www.haskell.org/platform/)

  in the top level directory type 'cabal install'

Contents
--------
README (this file)
LICENSE
ett-lite.cabal
test/*.pi          example files
src/*.hs           source code

Acknowledgement
---------------

Some of this code was adapted from the 'zombie-trellys' implementation by the
Trellys team. The Trellys team includes Aaron Stump, Tim Sheard, Stephanie
Weirich, Garrin Kimmell, Harley D. Eades III, Peng Fu, Chris Casinghino,
Vilhelm Sj√∂berg, Nathan Collins, and Ki Yung Ahn.

This material is based upon work supported by the National Science Foundation
under Grant Number 0910786. Any opinions, findings, and conclusions or
recommendations expressed in this material are those of the author(s) and do
not necessarily reflect the views of the National Science Foundation.
