module Equality where

-- equality is symmetric (definitionally so)

sym : (A:Type) -> (x:A) -> (y:A) -> (x = y) -> y = x
sym = \A x y pf . refl

-- and transitive

trans : (A:Type) -> (x:A) -> (y:A) -> (z:A) -> (x = z) -> (z = y) -> (x = y)
trans = \A x y z pf1 pf2 . refl

-- propositional equality is reflected into definitional equality (ETT)
reflection : (A:Type) -> (B:Type) -> (A = B) -> A -> B
reflection = \A B p x. x


eta : (A:Type) -> (B:Type) -> (f : A -> B) -> f = (\x. f x)
eta = \A B f. refl

-- funext : (A:Type) -> (B : Type) -> (f : A -> B) -> (g : A -> B) -> (x : A) -> (p : f x = g x) -> f = g
-- funext = \A B f g x p. let pf = TRUSTME
