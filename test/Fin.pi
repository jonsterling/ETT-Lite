-- PI library for finite numbers
--
-- Some of these are adapted from Fin.agda
--
-- Author: Stephanie Weirich, July 2013

module Fin where

import Nat
import Equality

data Fin (n : Nat) : Type where
  Zero of (m:Nat)(n = Succ m)
  Succ of (m:Nat)(n = Succ m) (Fin m)

x : Fin 1
x = Zero (0)(refl)

toNat : (n : Nat) -> Fin n -> Nat
ind toNat n = \ fn .
  case fn of
   Zero (m)(m_eq)   -> 0
   Succ (m)(m_eq) i -> plus 1 (toNat (m) i)

raise : (m : Nat) -> (n: Nat) -> Fin m -> (Fin (plus n m))
raise = \ m .
  ind raise n = \ i.
    case n of
      Zero    -> i
      Succ n0 -> Succ (plus n0 m)(refl) (raise n0 i)

inject_1 : (m : Nat) -> Fin m -> Fin (Succ m)
inject_1 = \m f . Succ (m)(refl) f

inject : (m:Nat) -> (n:Nat) -> Fin m -> Fin (plus m n)
ind inject m = \n fn.
  case fn of
    Zero (m0)(m_eq)   -> Zero (plus m0 n)(refl)
    Succ (m0)(m_eq) i -> Succ (plus m0 n)(refl) (inject (m0) n i)


fpred : (n : Nat) -> Fin n -> Fin n
fpred = \ n fn .
  case fn of
    Zero (m)(m_eq)-> Zero (m)(m_eq)
    (Succ (m)(m_eq) i) -> inject_1 (m) i

